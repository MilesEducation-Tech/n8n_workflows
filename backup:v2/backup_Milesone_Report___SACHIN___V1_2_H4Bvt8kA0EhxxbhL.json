{
  "createdAt": "2025-06-20T11:04:29.843Z",
  "updatedAt": "2025-07-08T11:59:37.000Z",
  "id": "H4Bvt8kA0EhxxbhL",
  "name": "Milesone Report | SACHIN | V1.2",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=ü§ñ Identity and Greeting\nName: Tron\nOpening Line:\n\n\"Hi, I'm AI ‡§Æ‡§ú‡§¶‡•Å‡§∞, your AI data analyst for the Miles One PostgreSQL databases. I have a confirmed and accurate understanding of your schema based on the provided column_descriptions table documentation. How can I assist you with your data today?\"\n\nüìå Purpose\nTron is an AI data analyst integrated with multiple PostgreSQL databases. Its purpose is to:\n\nUnderstand natural language prompts and user's analytical needs.\n\nGenerate accurate and valid PostgreSQL queries based strictly on the provided column_descriptions table schema.\n\nReturn SQL queries or actual query results.\n\nGenerate visual insights using QuickChart.\n\nüß† Core Capabilities\n1. Response Formats\nTron can respond with:\n\ntext\n\nimage(url)\n\nimage(binary)\n\nquery\n\ncsv\n\ntable\n\nIn the response, explicitly mention the type of output that you would be sending along with the data for the output parser to understand what needs to be fixed, if anything is incorrect.\n\nFor example:\n\nJSON\n\n{\n\"type\": \"text\",\n\"content\": \"This is a sample text response.\"\n}\n2. Query Generation Rules\nGenerate clean, valid PostgreSQL queries.\n\nEnsure queries are syntactically correct, use uppercase SQL keywords, and are properly indented for readability.\n\nCrucially, never hallucinate table names or column names. You must only use the table_name and column_name entries exactly as specified in the column_descriptions table.\n\nDefault to the last 30 days of data if no specific date range is specified in the user's request.\n\nDate and Timestamp Conversion: Always cast date/time-related columns to their appropriate DATE, TIMESTAMP, or TIMESTAMP WITH TIME ZONE data types in queries for accurate temporal analysis, as per the data_type in column_descriptions (e.g., CAST(column_name AS DATE) or column_name::date).\n\nMonth Format for Table Output: When presenting monthly data (e.g., in table or csv format), always display the month as a full month name followed by the year (e.g., \"March 2025\", \"February 2024\"). You can achieve this in PostgreSQL using TO_CHAR(date_column, 'Month UCLA') or similar formatting functions.\n\nTypo Tolerance: If the user's question contains minor spelling mistakes or typos, attempt to infer the correct intent and proceed with the query generation. Do not stop or ask for clarification for obvious spelling errors in common terms or column names that are close matches to the schema.\n\nDefault Sorting for Time Series: When providing month-on-month or any time-series data in a table format, always sort the results in chronological order by the month and year.\n\nüßæ Schema & Metadata Awareness\nAt the start of every session, Tron must:\n\nStrictly adhere to the provided schema documentation. Your ultimate source of truth for database structure is the column_descriptions table.\n\nLoad detailed descriptions from the column_descriptions table to understand:\n\ntable_name: The exact table names to be used in SQL queries (e.g., lead_info, mf2_enrollment, mf2_net_enquiry, miles_one_account_user).\n\ncolumn_name: The exact column names for each table.\n\ndata_type: The precise PostgreSQL data type of each column.\n\ndescription: Semantic meaning, usage notes, and implied relationships for each column.\n\nUse this information as the sole and absolute source of truth for all reasoning and query generation. Do not infer table or column names from other sources.\n\nüß≠ Context & History Awareness\nAt the start of every session, Tron also:\n\nLoads the user's query history to personalize its responses and understand previous analytical paths.\n\nTracks the current Session ID and Chat ID.\n\nMaintains statefulness across the session unless explicitly reset by the user.\n\nUses historical objectives and conversational context to refine current queries and provide more relevant insights.\n\nüîó Table & Column Mapping Conventions\nPrimary Reference Table: lead_info now serves as the central table for most queries, acting as the primary reference point.\n\nDefault Join Logic & Crucial Relationships: When joining tables, you must refer to the column_descriptions table for common columns and follow these explicit rules:\n\nFor mf2_enrollment, mf2_gmeet_and_visit, mf2_net_enquiry, mf2_webinar_registration, and miles_one_account_user:\n\nThe primary join key should be uuid, joining to lead_info.uuid. (Note: As per user instruction, uuid is assumed to be present in mf2_net_enquiry for joining.)\n\nFor joining miles_one_account_user with miles_one_user_devices:\n\nThe join key should be miles_one_id.\n\nBe case-insensitive when interpreting user requests for column names and expected response values, but generate SQL queries with the exact casing from the column_descriptions table.\n\nCrucial Table & Column Name Adherence (NO EXCEPTIONS):\n\nALWAYS refer to the column_descriptions table for the precise table_name and column_name.\n\nFor enrollments, the correct table name is mf2_enrollment.\n\nThe enrollment column names are cpa_enrolment_date, cma_enrolment_date, and usp_enrolment_date.\n\nFor net enquiries, the correct table name is mf2_net_enquiry.\n\nSpecific Column Mappings (Based on column_descriptions table - THESE ARE THE CORRECT NAMES):\n\nInstall: This concept refers to records primarily found within the miles_one_account_user table, which includes details about user accounts.\n\nNet Enquiry (ID): This refers to the enquiry_id column found in the mf2_net_enquiry table.\n\nUnderstanding Enrollment Counts & Linking to Enquiries:\n\nWhen asked about \"enrollments\" or \"enrollment numbers,\" you MUST query the mf2_enrollment table as the primary source for enrollment counts.\n\nThe mf2_enrollment table contains specific columns for course enrollments: cpa_enrolment_date, cma_enrolment_date, and usp_enrolment_date.\n\nFor each course, a non-NULL date value in its respective enrollment column signifies ONE enrollment for that course. Count these non-NULL dates to get enrollment numbers.\n\nTo count users enrolled in \"all three courses\": Use GROUP BY e.uuid HAVING MAX(CASE WHEN e.cpa_enrolment IS NOT NULL THEN 1 ELSE 0 END) = 1 AND MAX(CASE WHEN e.cma_enrolment IS NOT NULL THEN 1 ELSE 0 END) = 1 AND MAX(CASE WHEN e.usp_enrolment IS NOT NULL THEN 1 ELSE 0 END) = 1. This accounts for enrollments across potentially multiple records for the same user.\n\nWhen linking to \"enquiry date\" (e.g., \"enrollments after enquiry date\"), use the created_at or first_created_at from mf2_net_enquiry as the enquiry date. Use the specified join logic (primarily uuid) to connect the lead's enrollment to their enquiry.\n\nFor GMeet and Visit Counts (from mf2_gmeet_and_visit):\n\nDate Reference: Always use the created_at column for date-based filtering or aggregation.\n\nTotal Count: When asked for the total number of GMeet or Visit events, use COUNT(id).\n\nUnique Count (Users/Leads): When asked for the unique number of users or leads involved in GMeet or Visit events, use COUNT(DISTINCT lead_id) or COUNT(DISTINCT uuid) depending on the context of the request (use uuid for distinct users if both are present and \"users\" is implied).\n\nüìä Visualization Behavior\nIf the user requests a chart, graph, or visualization:\n\nGenerate using QuickChart.\n\nReturn either:\n\nThe chart's image URL.\n\nThe chart as a binary image.\n\nDo not explain the chart unless explicitly asked by the user to \"explain this chart\" or similar.\n\nüõ† Default Behaviors\nIf the user asks for data, return the actual query result in csv or table format.\n\nIf the user asks for SQL, return only the query in query format.\n\nIf intent is unclear, default to returning data to provide immediate value.\n\nExtract precise requirements by asking clarifying questions to the user when needed (e.g., \"Do you want to see data for a specific time period or for a particular program?\").\n\nüéØ Self-Correction & Focus\nPrioritize Direct Action: When given a new request, immediately proceed to generate the requested output (query, data, chart). Minimize conversational interjections, apologies, or explanations of internal processing steps.\n\nSilent Self-Correction: If an internal error occurs (e.g., a column reference issue, incorrect table join, or data type mismatch) that can be resolved by re-consulting the column_descriptions table or adjusting the query based on existing prompt rules, do so silently without notifying the user of the error or the correction process. The column_descriptions table is your absolute source of truth for schema details and join logic.\n\nConcision: Be direct and to the point in your responses. Avoid redundant phrases or asking for clarification on details already covered by the schema or prompt instructions.\n\nFocus on Latest Instruction: Always prioritize and address the most recent explicit instruction from the user."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        360,
        20
      ],
      "id": "cc39e358-99e4-4ae6-ae7c-c5325ac34916",
      "name": "AI Agent",
      "retryOnFail": true,
      "maxTries": 5
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -520,
        1120
      ],
      "id": "1ef54ae2-fcc4-41d5-9644-ae0fd98fdb61",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -720,
        1120
      ],
      "id": "e3f2eabc-a048-4be3-9654-e57cba98335e",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "7JUQlMKIiSlGnibP",
          "name": "Miles AI/ML - Analytics Account - Open Router"
        }
      }
    },
    {
      "parameters": {
        "agent": "sqlAgent",
        "options": {}
      },
      "id": "d079cf0a-1d8f-41a8-906d-f8711ce2c99d",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -600,
        840
      ],
      "typeVersion": 1.6,
      "credentials": {
        "postgres": {
          "id": "n56OCy1uz5eMlz58",
          "name": "Miles One Reports"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        80,
        600
      ],
      "id": "e4e4db61-7241-4da4-a4a6-9740458ef45c",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "7JUQlMKIiSlGnibP",
          "name": "Miles AI/ML - Analytics Account - Open Router"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        860,
        700
      ],
      "id": "81330b02-118e-4dab-aa0c-272e63e4b0be",
      "name": "Calculator"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1900,
        260
      ],
      "id": "009f1a8c-68e0-42ea-8098-550dd324f7d6",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $fromAI('query','query to run as per user input') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        600,
        740
      ],
      "id": "a0f51c4f-b68b-4706-8c8c-e537f6544a86",
      "name": "Miles One Reports",
      "credentials": {
        "postgres": {
          "id": "n56OCy1uz5eMlz58",
          "name": "Miles One Reports"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $fromAI('query','query to run as per user input') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1920,
        460
      ],
      "id": "b7fd6c4e-de12-4068-911f-818f66413f3e",
      "name": "MilesOne Production",
      "credentials": {
        "postgres": {
          "id": "iOOTVit15R9PSjWX",
          "name": "Milesone-Production(DO NOT TOUCH)"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  table_name, \n  column_name, \n  data_type,\n  is_nullable,\n  character_maximum_length,\n  numeric_precision,\n  numeric_scale\nFROM \n  information_schema.columns\nWHERE \n  table_schema = 'public'\nORDER BY \n  table_name, ordinal_position;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        440,
        740
      ],
      "id": "c639b0df-a1ea-4dcb-8f46-78a1cb5c3699",
      "name": "Schema of Miles On Reports",
      "credentials": {
        "postgres": {
          "id": "n56OCy1uz5eMlz58",
          "name": "Miles One Reports"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  table_name, \n  column_name, \n  data_type,\n  is_nullable,\n  character_maximum_length,\n  numeric_precision,\n  numeric_scale\nFROM \n  information_schema.columns\nWHERE \n  table_schema = 'public'\nORDER BY \n  table_name, ordinal_position;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        980,
        640
      ],
      "id": "34064ac7-a164-410d-b437-85fa9e0cf15e",
      "name": "Schema of Milesone Production",
      "credentials": {
        "postgres": {
          "id": "iOOTVit15R9PSjWX",
          "name": "Milesone-Production(DO NOT TOUCH)"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $fromAI('query','query to run as per user input') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1940,
        620
      ],
      "id": "9e3b5e6d-add7-4f96-9c22-60f0845abdf6",
      "name": "MF Prod Read",
      "credentials": {
        "postgres": {
          "id": "UlHvqQraJFrdqkr2",
          "name": "MF Prod Read"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  table_name, \n  column_name, \n  data_type,\n  is_nullable,\n  character_maximum_length,\n  numeric_precision,\n  numeric_scale\nFROM \n  information_schema.columns\nWHERE \n  table_schema = 'public'\nORDER BY \n  table_name, ordinal_position;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2000,
        860
      ],
      "id": "79dad9eb-65fe-4e27-9549-47769c6dc0ad",
      "name": "MF Prod Read Schema",
      "credentials": {
        "postgres": {
          "id": "UlHvqQraJFrdqkr2",
          "name": "MF Prod Read"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        260,
        720
      ],
      "id": "395596d7-3f1c-42da-abda-853fb2a88b0a",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "n56OCy1uz5eMlz58",
          "name": "Miles One Reports"
        }
      }
    },
    {
      "parameters": {
        "chartType": "={{ $fromAI('chartType') }}",
        "labelsMode": "array",
        "labelsArray": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Labels_Array', ``, 'string') }}",
        "data": "={{ $fromAI('data', ``, 'json') }}",
        "output": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Put_Output_In_Field', ``, 'string') }}",
        "chartOptions": {
          "backgroundColor": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Background_Color', ``, 'string') }}"
        },
        "datasetOptions": {
          "backgroundColor": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Background_Color', ``, 'string') }}",
          "borderColor": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Border_Color', ``, 'string') }}",
          "fill": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fill', ``, 'boolean') }}",
          "label": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Label', ``, 'string') }}",
          "pointStyle": "circle"
        }
      },
      "type": "n8n-nodes-base.quickChartTool",
      "typeVersion": 1,
      "position": [
        1140,
        640
      ],
      "id": "f54f2164-c900-47d4-a4e1-895c5e6cf0f7",
      "name": "QuickChart"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  \"public\".\"column_descriptions\".\"id\" AS \"id\",\n  \"public\".\"column_descriptions\".\"table_name\" AS \"table_name\",\n  \"public\".\"column_descriptions\".\"column_name\" AS \"column_name\",\n  \"public\".\"column_descriptions\".\"data_type\" AS \"data_type\",\n  \"public\".\"column_descriptions\".\"description\" AS \"description\"\nFROM\n  \"public\".\"column_descriptions\"",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        740,
        740
      ],
      "id": "6c201d69-2a29-4506-99e6-e58eb2f733e8",
      "name": "Milesone Report Table Description",
      "credentials": {
        "postgres": {
          "id": "n56OCy1uz5eMlz58",
          "name": "Miles One Reports"
        }
      }
    },
    {
      "parameters": {
        "content": "HI, your job is to replace Sachin Kasyap",
        "height": 180
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -900,
        160
      ],
      "typeVersion": 1,
      "id": "36cfaa81-0b67-4d53-a4b6-3b8644e7f1bd",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "f94b976f-cb08-4089-bdea-081216963a31",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1840,
        -60
      ],
      "id": "ca314b1d-4c6b-4d00-8bcd-e4b2f0c2a2d9",
      "name": "Webhook",
      "webhookId": "f94b976f-cb08-4089-bdea-081216963a31"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1860,
        100
      ],
      "id": "d433bab1-0360-4b69-8d13-05ed6234f226",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {
          "loadPreviousSession": "memory"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -220,
        280
      ],
      "id": "fca7cb65-5979-47d8-8e83-2b169be34a94",
      "name": "When chat message received",
      "webhookId": "cdbf03fe-cf23-46e3-89ed-b316a35ad2bd"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -280,
        500
      ],
      "id": "14fe8f23-2d74-40f4-bbbf-30a3bd2e4ba3",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "n56OCy1uz5eMlz58",
          "name": "Miles One Reports"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"messages\": [\n    {\n      \"type\": \"text\",\n      \"content\": \"Hello! How can I help you today?\"\n    },\n    {\n      \"type\": \"image\",\n      \"url\": \"https://example.com/help.png\",\n      \"alt\": \"Help Image\"\n    },\n    {\n      \"type\": \"image\",\n      \"binary\": \"<base64-encoded-image-data>\",\n      \"alt\": \"Help Image in Binary\"\n    },\n    {\n      \"type\": \"query\",\n      \"sql\": \"SELECT month, installs FROM installs_data WHERE month >= 'Jan 2025';\"\n    },\n    {\n      \"type\": \"csv\",\n      \"content\": \"Month,Installs\\nJan 2025,20\\nFeb 2025,79\\nMar 2025,461\\nApr 2025,1703\\nMay 2025,2511\\nJun 2025,2844\"\n    },\n    {\n      \"type\": \"table\",\n      \"title\": \"Sample Data Table\",\n      \"columns\": [\n        { \"title\": \"Month\", \"key\": \"month\" },\n        { \"title\": \"Installs\", \"key\": \"installs\" }\n      ],\n      \"rows\": [\n        { \"month\": \"Jan 2025\", \"installs\": 20 },\n        { \"month\": \"Feb 2025\", \"installs\": 79 },\n        { \"month\": \"Mar 2025\", \"installs\": 461 },\n        { \"month\": \"Apr 2025\", \"installs\": 1703 },\n        { \"month\": \"May 2025\", \"installs\": 2511 },\n        { \"month\": \"Jun 2025\", \"installs\": 2844 }\n      ]\n    }\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2000,
        1080
      ],
      "id": "2519778a-5fd5-4201-9617-4c08724151c6",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {
          "prompt": "=Instructions:\n--------------\n{instructions}\n\nThere can be a maximum of 6 objects - \"text, image(url), image(binary), query, csv, table\" and minimum of 1.\n\nRefer to the output of the agent to identify the relevant keys required in the final structure -  it explicitly mentions which key should be present in the output. \n\n--------------\nCompletion:\n--------------\n{completion}\n\nSend the key-value pairs as defined by the agent. \n\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\nif errored (no output format matches the input requested), send \"No matching output format found\".\n--------------\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        1260,
        380
      ],
      "id": "225d35a4-e956-48fd-a39e-b6c683e846d9",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"messages\": [\n    {\n      \"type\": \"text\",\n      \"content\": \"Hello! How can I help you today?\"\n    },\n    {\n      \"type\": \"image\",\n      \"url\": \"{{image_url}}\",\n      \"alt\": \"{{image_alt_text}}\"\n    },\n    {\n      \"type\": \"image\",\n      \"binary\": \"{{base64_encoded_image_data}}\",\n      \"alt\": \"{{binary_image_alt_text}}\"\n    },\n    {\n      \"type\": \"query\",\n      \"sql\": \"SELECT month, installs FROM installs_data WHERE month >= '{{start_month_year_query}}';\"\n    },\n    {\n      \"type\": \"csv\",\n      \"content\": \"Month,Installs\\n{{month_1}},{{installs_1}}\\n{{month_2}},{{installs_2}}\\n{{month_3}},{{installs_3}}\\n{{month_4}},{{installs_4}}\\n{{month_5}},{{installs_5}}\\n{{month_6}},{{installs_6}}\"\n    },\n    {\n      \"type\": \"table\",\n      \"title\": \"{{table_title}}\",\n      \"columns\": [\n        { \"title\": \"{{column_title_1}}\", \"key\": \"column name in snake case\" },\n          { \"title\": \"{{column_title_2}}\", \"key\": \"column name in snake case\" }\n      ],\n      \"rows\": [\n        { \"column 1 key\": \"{{row_value_1_col1}}\", \"column 2 key\": \"{{column_title_2_snake_case}}\" },\n        { \"column 1 key\": \"{{row_value_2_col1}}\", \"column 2 key\": \"{{column_title_2_snake_case}}\" }\n      ]\n    }\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1600,
        620
      ],
      "id": "31197892-eddd-4986-a248-2fc8c43e23c1",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": "openai/gpt-4.1",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1340,
        660
      ],
      "id": "ad903f7f-ef8d-4922-a95d-fdedd0b4014e",
      "name": "OpenRouter Chat Model3",
      "credentials": {
        "openRouterApi": {
          "id": "7JUQlMKIiSlGnibP",
          "name": "Miles AI/ML - Analytics Account - Open Router"
        }
      }
    }
  ],
  "connections": {
    "AI Agent": {
      "main": [
        []
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Miles One Reports": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Schema of Miles On Reports": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "QuickChart": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Milesone Report Table Description": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        []
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "When chat message received",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "osaLco4lVgTtLpKH"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "c2ea0da4-f9f7-4252-99ef-dd14909f8194",
  "triggerCount": 3,
  "shared": [
    {
      "createdAt": "2025-06-20T11:04:29.868Z",
      "updatedAt": "2025-06-20T11:04:29.868Z",
      "role": "workflow:owner",
      "workflowId": "H4Bvt8kA0EhxxbhL",
      "projectId": "cR71BtEHrwxYg2T3",
      "project": {
        "createdAt": "2025-03-05T09:02:14.120Z",
        "updatedAt": "2025-03-05T09:02:14.120Z",
        "id": "cR71BtEHrwxYg2T3",
        "name": "jithin jithin.kumar@mileseducation.com <jithin.kumar@mileseducation.com>",
        "type": "personal",
        "icon": null,
        "projectRelations": [
          {
            "createdAt": "2025-03-05T09:02:14.123Z",
            "updatedAt": "2025-03-05T09:02:14.123Z",
            "role": "project:personalOwner",
            "userId": "f51de756-6885-4866-9956-6527c235116c",
            "projectId": "cR71BtEHrwxYg2T3",
            "user": {
              "createdAt": "2023-08-04T07:13:39.569Z",
              "updatedAt": "2025-03-27T08:36:36.628Z",
              "id": "f51de756-6885-4866-9956-6527c235116c",
              "email": "jithin.kumar@mileseducation.com",
              "firstName": "jithin",
              "lastName": "jithin.kumar@mileseducation.com",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2023-08-04T07:16:29.938Z",
                "personalization_survey_n8n_version": "1.1.1"
              },
              "settings": {
                "userActivated": true,
                "firstSuccessfulWorkflowId": "AI5qL0olh221f3jV",
                "isOnboarded": true,
                "userActivatedAt": 1741165335002,
                "easyAIWorkflowOnboarded": true,
                "npsSurvey": {
                  "responded": true,
                  "lastShownAt": 1743064591892
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "isPending": false,
              "isOwner": true
            }
          }
        ]
      }
    }
  ],
  "tags": []
}